import json
from datetime import datetime, timezone, timedelta

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from nats.js import JetStreamContext

from bot.config import settings
from bot.callbacks.calendar import (
    YearToCallbackData,
    MonthToCallbackData,
    DayToCallbackData,
    HourToCallbackData,
    MinuteToCallbackData,
)
from bot.fsm.fsm import AdminSG, AdminAdvSG
from bot.handlers.admin_handlers.utils import get_month_kb, get_day_kb
from bot.keyboards.admin_kb import create_admin_kb
from bot.lexicon.lexicon_ru import MONTHS, MONTH_DAYS
from bot.services.adv.publisher import adv_publisher

router = Router(name="adv_router")


async def completed_adv(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()

    builder_adv = InlineKeyboardBuilder()
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–í—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ", callback_data="adm_adv_correct"))
    builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üîÑ", callback_data="adm_adv_change_msg_text"))

    if "url" in data:
        builder_adv.row(InlineKeyboardButton(text=f"{data['adv_url_text']}", url=f"{data['url']}"))

        builder.row(InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ üîÑ",
            callback_data="adm_adv_change_btn_name"
        ))
        builder.row(InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–Ω–æ–ø–∫–∏ üîÑ",
            callback_data="adm_adv_change_btn_url")
        )

    if "adv_pictures" in data:
        builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ üîÑ", callback_data="adm_adv_change_pics"))

        if isinstance(data["adv_pictures"], list):
            adv_pictures_media = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption=f"{data['adv_text']}" if not i else "",
                ) for i, photo_file_id in enumerate(data["adv_pictures"])
            ]

            await bot.send_media_group(
                chat_id=message.chat.id,
                media=adv_pictures_media,
            )
        elif isinstance(data["adv_pictures"], str):
            await message.answer_photo(
                photo=data["adv_pictures"],
                caption=f"{data['adv_text']}",
                reply_markup=builder_adv.as_markup(),
            )
    else:
        await message.answer(
            text=f"{data['adv_text']}",
            reply_markup=builder_adv.as_markup(),
        )

    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="adm_adv"))
    await state.set_state(AdminSG.in_adm)
    await message.answer(
        text="–ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—ã—à–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, "
             "–≤—Å—ë –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
        reply_markup=builder.as_markup()
    )


async def start_creating_adv(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    dt_now = datetime.now(tz=timezone(timedelta(hours=3)))

    builder = InlineKeyboardBuilder()
    buttons = list()

    for year in range(dt_now.year, dt_now.year + 2):
        buttons.append(
            InlineKeyboardButton(
                text=f"{year}",
                callback_data=YearToCallbackData(
                    year_to=year,
                ).pack(),
            )
        )
    builder.row(*buttons)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ–¥</b>, –≤ <b>–∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∫–ª–∞–º—É</b>",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AdminAdvSG.adv)


@router.callback_query(StateFilter(AdminAdvSG.adv), F.data == "cancel")
async def cancel_adv_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=create_admin_kb(),
    )
    await state.set_state(AdminSG.in_adm)
    await callback.answer()


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv")
async def adm_adv_command(callback: CallbackQuery, state: FSMContext):
    await start_creating_adv(callback, state)
    await callback.answer()


@router.callback_query(StateFilter(AdminAdvSG.adv), YearToCallbackData.filter())
async def select_year_to_adv_handler(
        callback: CallbackQuery,
        callback_data: YearToCallbackData,
        state: FSMContext,
):
    await callback.answer()
    await state.update_data(year_to=callback_data.year_to)

    builder = InlineKeyboardBuilder()

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–º–µ—Å—è—Ü</b>, –≤ <b>–∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∫–ª–∞–º—É</b>",
        reply_markup=get_month_kb(builder=builder, cb_data=MonthToCallbackData, date_data=await state.get_data())
    )


@router.callback_query(StateFilter(AdminAdvSG.adv), MonthToCallbackData.filter())
async def select_month_to_handler(callback: CallbackQuery, callback_data: MonthToCallbackData, state: FSMContext):
    await state.update_data(month_to=callback_data.month_to)

    builder = InlineKeyboardBuilder()

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å</b>, <b>–≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞</b>",
        reply_markup=get_day_kb(builder=builder, cb_data=DayToCallbackData, date_data=await state.get_data()),
    )
    await callback.answer()


@router.callback_query(StateFilter(AdminAdvSG.adv), DayToCallbackData.filter())
async def select_day_to_handler(callback: CallbackQuery, callback_data: DayToCallbackData, state: FSMContext):
    dt_now = datetime.now(tz=timezone(timedelta(hours=3)))
    await state.update_data(day_to=callback_data.day_to)
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    buttons = list()

    if data["year_to"] == dt_now.year and data["month_to"] == dt_now.month and data["day_to"] == dt_now.day:
        start_hour = dt_now.hour
    else:
        start_hour = 0

    for hour in range(start_hour, 24):
        buttons.append(
            InlineKeyboardButton(
                text=f"{hour}",
                callback_data=HourToCallbackData(
                    hour_to=hour,
                ).pack(),
            )
        )
    builder.add(*buttons)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>—á–∞—Å</b>, <b>–≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞</b>",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(StateFilter(AdminAdvSG.adv), HourToCallbackData.filter())
async def select_hour_to_handler(callback: CallbackQuery, callback_data: HourToCallbackData, state: FSMContext):
    dt_now = datetime.now(tz=timezone(timedelta(hours=3)))
    await state.update_data(hour_to=callback_data.hour_to)
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    buttons = list()

    if (data["year_to"] == dt_now.year and
            data["month_to"] == dt_now.month and
            data["day_to"] == dt_now.day and
            data["hour_to"] == dt_now.hour):
        start_minute = dt_now.minute
    else:
        start_minute = 0

    for minute in range(start_minute, 59 + 1):
        buttons.append(
            InlineKeyboardButton(
                text=f"{minute}",
                callback_data=MinuteToCallbackData(
                    minute_to=minute,
                ).pack(),
            )
        )
    builder.add(*buttons)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫—É—é <b>–º–∏–Ω—É—Ç—É</b> –Ω—É–∂–Ω–æ <b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É</b>",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(StateFilter(AdminAdvSG.adv), MinuteToCallbackData.filter())
async def select_minute_to_handler(callback: CallbackQuery, callback_data: MinuteToCallbackData, state: FSMContext):
    await state.set_state(AdminSG.in_adm)
    await state.update_data(minute_to=callback_data.minute_to)
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–í—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚úÖ", callback_data="adm_adv_date_correct"))
    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="adm_adv"))

    await callback.message.edit_text(
        text="–í–∞—à–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:\n"
             f"<b>{data['day_to']} {MONTHS[data['month_to']]} {data['year_to']} "
             f"{'0' + str(data['hour_to']) if data['hour_to'] < 10 else data['hour_to']}:"
             f"{'0' + str(data['minute_to']) if data['minute_to'] < 10 else data['minute_to']}</b>\n\n"
             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É?",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv_date_correct")
async def adm_adv_date_correct_handler(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="adm_adv_add_picture"))
    builder.row(InlineKeyboardButton(text="–ë–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="adm_adv_no_picture"))

    await callback.message.edit_text(
        text="–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AdminAdvSG.adv)
    await callback.answer()


@router.callback_query(StateFilter(AdminAdvSG.adv), F.data == "adm_adv_no_picture")
async def adm_adv_no_picture_handler(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É", callback_data="adm_adv_add_link_btn"))
    builder.row(InlineKeyboardButton(text="–ë–µ–∑ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", callback_data="adm_adv_no_link_btn"))

    await callback.message.edit_text(
        text="–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        reply_markup=builder.as_markup(),
    )
    await state.set_state(AdminAdvSG.adv_url)
    await callback.answer()


@router.callback_query(StateFilter(AdminAdvSG.adv), F.data == "adm_adv_add_picture")
async def adm_adv_app_picture_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–∏–∫—Ä–µ–ø–ª—é –∫ —Ä–µ–∫–ª–∞–º–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é!",
    )
    await state.set_state(AdminAdvSG.adv_pictures)
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_pictures))
async def adm_adv_select_pictures_handler(message: Message, state: FSMContext):
    if message.photo:
        if "adv_pictures" not in await state.get_data():
            await state.update_data(adv_pictures=message.photo[-1].file_id)

        builder = InlineKeyboardBuilder()
        data = await state.get_data()

        if isinstance(data["adv_pictures"], list):
            await message.answer(
                text="–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏!\n\n"
                     "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            )
            await state.set_state(AdminAdvSG.adv_text)
        else:
            builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É", callback_data="adm_adv_add_link_btn"))
            builder.row(InlineKeyboardButton(text="–ë–µ–∑ –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", callback_data="adm_adv_no_link_btn"))

            await message.answer(
                text="–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É!\n\n"
                     "–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É –≤ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                reply_markup=builder.as_markup(),
            )
            await state.set_state(AdminAdvSG.adv_url)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        )


@router.callback_query(StateFilter(AdminAdvSG.adv_url), F.data == "adm_adv_add_link_btn")
async def adm_adv_add_link_btn_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤ –∫–Ω–æ–ø–∫–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
    )
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_url))
async def adm_adv_select_link_handler(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(url=message.text)
        await message.answer(
            text="–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Å—ã–ª–∫—É!\n\n"
                 "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏!",
        )
        await state.set_state(AdminAdvSG.adv_url_btn_name)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å —Å—Å—ã–ª–∫—É –≤–∏–¥–∞ https://–≤–∞—à–∞_—Å—Å—ã–ª–∫–∞.com <b>–≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞</b>",
        )


@router.message(StateFilter(AdminAdvSG.adv_url_btn_name))
async def adm_adv_change_btn_url_handler(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(adv_url_text=message.text)
        await message.answer(
            text="–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
        )
        await state.set_state(AdminAdvSG.adv_text)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å <b>–∏–º—è</b> –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏!\n\n"
                 "–ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ, –æ—Ç–ª–∏—á–∞—é—â–µ–µ—Å—è –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
        )


@router.callback_query(StateFilter(AdminAdvSG.adv_url), F.data == "adm_adv_no_link_btn")
async def adm_adv_no_link_btn_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
    )
    await state.set_state(AdminAdvSG.adv_text)
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_text))
async def adm_adv_select_adv_text_handler(message: Message, state: FSMContext, bot: Bot):
    if message.text:
        data = await state.get_data()

        if isinstance(data.get("adv_pictures", None), list):
            await state.update_data(count_of_pics=len(data["adv_pictures"]))
        elif isinstance(data.get("adv_pictures", None), str):
            await state.update_data(count_of_pics=1)
        else:
            await state.update_data(count_of_pics=0)

        await state.update_data(old_pics=data.get("adv_pictures", None), adv_text=message.text)
        await completed_adv(message, state, bot)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π <b>—Ç–µ–∫—Å—Ç</b> —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
                 "–ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ, –æ—Ç–ª–∏—á–∞—é—â–µ–µ—Å—è –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
        )


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv_correct")
async def adm_adv_completed_msg_handler(
        callback: CallbackQuery, state: FSMContext, js: JetStreamContext,
):
    data = await state.get_data()
    dt_send = datetime(
        year=data["year_to"],
        month=data["month_to"],
        day=data["day_to"],
        hour=data["hour_to"],
        minute=data["minute_to"],
        tzinfo=timezone(timedelta(hours=3)),
    )
    await adv_publisher(
        js=js,
        subject=settings.NATS_CONSUMER_SUBJECT_ADV,
        dt_send=dt_send.strftime("%Y-%m-%d %H:%M"),
        text=json.dumps(data.get("adv_text")),
        pictures=json.dumps(data.get("adv_pictures", None)),
        url=json.dumps(data.get("url", None)),
        url_text=json.dumps(data.get("adv_url_text", None)),
    )
    await callback.message.edit_text(
        text=f"‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {dt_send.strftime('%Y-%m-%d %H:%M')}\n\n"
             "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=create_admin_kb(),
    )
    await callback.answer()


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv_change_msg_text")
async def adm_adv_change_msg_text_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
    )
    await state.set_state(AdminAdvSG.adv_change_text)
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_change_text))
async def adm_adv_change_text_handler(message: Message, state: FSMContext, bot: Bot):
    if message.text:
        await state.update_data(adv_text=message.text)
        await completed_adv(message, state, bot)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π <b>—Ç–µ–∫—Å—Ç</b> —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
                 "–ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ, –æ—Ç–ª–∏—á–∞—é—â–µ–µ—Å—è –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
        )


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv_change_pics")
async def adm_adv_change_pics_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!"
    )
    await state.set_state(AdminAdvSG.adv_change_pics)
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_change_pics))
async def adm_adv_change_pics_handler(message: Message, state: FSMContext, bot: Bot):
    if message.photo:
        data = await state.get_data()

        if data["count_of_pics"] == 1 and isinstance(data["adv_pictures"], list) and data.get("url", None):
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="adm_adv_change_pics_cancel"))

            await state.update_data(adv_pictures=data["old_pics"])

            await message.answer(
                text="–†–∞–Ω–µ–µ –í—ã –ø—Ä–∏—Å—ã–ª–∞–ª–∏ 1 –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ —Å–µ–π—á–∞—Å –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n"
                     "üî¥ –¢–µ–ª–µ–≥—Ä–∞–º –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ–ª–µ–µ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
                     "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª–µ–µ 1 –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Ç–æ –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                     "<em>‚ö†Ô∏è–ï—Å–ª–∏ –í—ã —Å–ª—É—á–∞–π–Ω–æ –æ—à–∏–±–ª–∏—Å—å, —Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                     "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É</em>\n\n"
                     '<em>‚ö†Ô∏è–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ</b></em>',
                reply_markup=builder.as_markup(),
            )
            return

        if isinstance(data["adv_pictures"], str):
            await state.update_data(adv_pictures=message.photo[-1].file_id)
        # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ–ª–µ–µ 1 –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Ç–æ –≤—Å—ë –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –≤ AlbumMiddleware

        await completed_adv(message, state, bot)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n"
                 "–ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ, –æ—Ç–ª–∏—á–∞—é—â–µ–µ—Å—è –æ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫",
        )


@router.callback_query(StateFilter(AdminAdvSG.adv_change_pics), F.data == "adm_adv_change_pics_cancel")
async def adm_adv_change_pics_cancel_handler(callback: CallbackQuery, state: FSMContext):
    await start_creating_adv(callback, state)
    await callback.answer()


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv_change_btn_name")
async def adm_adv_change_btn_name_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
    )
    await state.set_state(AdminAdvSG.adv_change_url_btn_name)
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_change_url_btn_name))
async def adm_adv_change_btn_name_handler(message: Message, state: FSMContext, bot: Bot):
    if message.text:
        await state.update_data(adv_url_text=message.text)
        await completed_adv(message, state, bot)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
                 "–ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ, –æ—Ç–ª–∏—á–∞—é—â–µ–µ—Å—è –æ—Ç —Ç–µ–∫—Å—Ç–∞",
        )


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_adv_change_btn_url")
async def adm_adv_change_btn_url_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
    )
    await state.set_state(AdminAdvSG.adv_change_url)
    await callback.answer()


@router.message(StateFilter(AdminAdvSG.adv_change_url))
async def adm_adv_change_btn_url_handler(message: Message, state: FSMContext, bot: Bot):
    if message.text:
        await state.update_data(url=message.text)
        await completed_adv(message, state, bot)
    else:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!\n\n"
                 "–ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —á—Ç–æ-—Ç–æ, –æ—Ç–ª–∏—á–∞—é—â–µ–µ—Å—è –æ—Ç —Ç–µ–∫—Å—Ç–∞",
        )

import json
from datetime import datetime, timezone, timedelta

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from nats.js import JetStreamContext

from bot.callbacks.calendar import MonthToCallbackData, YearToCallbackData, DayToCallbackData, HourToCallbackData
from bot.config import settings
from bot.fsm.fsm import AdminSG, AdminNotifyUsersSG
from bot.handlers.admin_handlers.utils import get_month_kb, get_year_kb, get_day_kb
from bot.keyboards.admin_kb import create_admin_kb
from bot.lexicon.lexicon_ru import MONTHS, MONTH_DAYS
from bot.services.notify_users.publisher import notify_users_publisher

router = Router(name="adm_notify_users_router")


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), F.data == "cancel")
async def go_back_to_adm_menu_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=create_admin_kb(),
    )
    await state.set_state(AdminSG.in_adm)
    await callback.answer()


@router.callback_query(StateFilter(AdminSG.in_adm), F.data == "adm_notify")
async def adm_notify_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    builder = InlineKeyboardBuilder()

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ–¥</b> –¥–∞—Ç—ã, <b>–∫–æ–≥–¥–∞ –º—ã —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",
        reply_markup=get_year_kb(builder=builder, cb_data=YearToCallbackData),
    )
    await state.set_state(AdminNotifyUsersSG.notify_date)


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), F.data == "adm_notify")
async def adm_notify_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()

    builder = InlineKeyboardBuilder()

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ–¥</b> –¥–∞—Ç—ã, <b>–∫–æ–≥–¥–∞ –º—ã —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",
        reply_markup=get_year_kb(builder=builder, cb_data=YearToCallbackData),
    )
    await state.set_state(AdminNotifyUsersSG.notify_date)


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), YearToCallbackData.filter())
async def select_year_to_notify_handler(
        callback: CallbackQuery,
        callback_data: YearToCallbackData,
        state: FSMContext,
):
    await callback.answer()
    await state.update_data(year_to=callback_data.year_to)

    builder = InlineKeyboardBuilder()

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–º–µ—Å—è—Ü</b> –¥–∞—Ç—ã, <b>–∫–æ–≥–¥–∞ –º—ã —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",
        reply_markup=get_month_kb(builder=builder, cb_data=MonthToCallbackData, date_data=await state.get_data()),
    )


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), MonthToCallbackData.filter())
async def select_month_to_notify_handler(
        callback: CallbackQuery,
        callback_data: MonthToCallbackData,
        state: FSMContext,
):
    await callback.answer()
    await state.update_data(month_to=callback_data.month_to)

    builder = InlineKeyboardBuilder()

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å</b>, <b>–∫–æ–≥–¥–∞ –º—ã —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",
        reply_markup=get_day_kb(builder=builder, cb_data=DayToCallbackData, date_data=await state.get_data()),
    )


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), DayToCallbackData.filter())
async def select_day_to_notify_handler(
        callback: CallbackQuery,
        callback_data: DayToCallbackData,
        state: FSMContext,
):
    await callback.answer()
    await state.update_data(day_to=callback_data.day_to)
    dt_now = datetime.now(tz=timezone(timedelta(hours=3)))
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    buttons = list()

    if data["year_to"] == dt_now.year and data["month_to"] == dt_now.month and data["day_to"] == dt_now.day:
        if dt_now.month == 12 and dt_now.day == 31 and dt_now.hour == 23:
            # —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
            # —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 23 —á–∞—Å–∞ 31 –¥–µ–∫–∞–±—Ä—è
            await state.update_data(year_to=data['year_to'] + 1, month_to=1, day_to=1)
            start_hour = 0
        elif MONTH_DAYS[dt_now.month] == data['day_to'] and dt_now.hour == 23:
            # —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫–∞–∫–æ–≥–æ-—Ç–æ –º–µ—Å—è—Ü–∞
            await state.update_data(month=data['month_to'] + 1, day_to=1)
            start_hour = 0
        elif dt_now.hour == 23:
            # —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É–∂–µ 23 —á–∞—Å–∞
            await state.update_data(day_to=data['day_to'] + 1)
            start_hour = 0
        else:
            start_hour = dt_now.hour + 1
    else:
        start_hour = 0

    for hour in range(start_hour, 24):
        buttons.append(
            InlineKeyboardButton(
                text=f"{hour}",
                callback_data=HourToCallbackData(
                    hour_to=hour,
                ).pack(),
            )
        )
    builder.add(*buttons)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ <b>—á–∞—Å</b>, <b>–≤ –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), HourToCallbackData.filter())
async def select_hour_to_notify_handler(
        callback: CallbackQuery,
        callback_data: HourToCallbackData,
        state: FSMContext,
):
    await callback.answer()
    await state.update_data(hour_to=callback_data.hour_to)
    data = await state.get_data()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–í—Å—ë –≤–µ—Ä–Ω–æ ‚úÖ", callback_data="adm_date_notify_correct"))
    builder.row(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="adm_notify"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))

    await callback.message.edit_text(
        text=f"–£–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <b>{data['day_to']} {MONTHS[data['month_to']]} {data['year_to']} –≥–æ–¥–∞ "
             f"–≤ {data['hour_to']}:00</b>\n\n"
             "–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_date), F.data == "adm_date_notify_correct")
async def adm_notify_correct_date_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )
    await state.set_state(AdminNotifyUsersSG.notify_text)


@router.message(StateFilter(AdminNotifyUsersSG.notify_text), F.text)
async def adm_notify_text_handler(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–í—Å—ë –≤–µ—Ä–Ω–æ ‚úÖ", callback_data="adm_text_notify_correct"))
    builder.row(InlineKeyboardButton(text="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç üîÑ", callback_data="adm_text_notify_change"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel"))

    await state.update_data(text=message.text)
    data = await state.get_data()

    await message.answer(
        text=f"–£–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <b>{data['day_to']} {MONTHS[data['month_to']]} {data['year_to']} –≥–æ–¥–∞ "
             f"–≤ {data['hour_to']}:00</b>\n\n"
             "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
             f"<em>{data['text']}</em>\n\n"
             "–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_text), F.data == "adm_text_notify_change")
async def adm_notify_text_change_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )


@router.callback_query(StateFilter(AdminNotifyUsersSG.notify_text), F.data == "adm_text_notify_correct")
async def adm_notify_text_correct_handler(callback: CallbackQuery, js: JetStreamContext, state: FSMContext):
    await callback.answer()
    data = await state.get_data()

    dt_send = datetime(
        year=data['year_to'],
        month=data['month_to'],
        day=data['day_to'],
        hour=data['hour_to'],
        minute=0,
        tzinfo=timezone(timedelta(hours=3)),
    )
    await notify_users_publisher(
        js=js,
        subject=settings.NATS_CONSUMER_SUBJECT_NOTIFY_USERS,
        dt_send=dt_send.strftime("%Y-%m-%d %H:%M"),
        text=json.dumps(data['text']),
    )
    await callback.message.edit_text(
        text=f"‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {dt_send.strftime('%Y-%m-%d %H:%M')}\n\n"
             "üîí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=create_admin_kb(),
    )
    await state.set_state(AdminSG.in_adm)

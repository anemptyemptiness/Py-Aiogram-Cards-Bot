import random
from pathlib import Path

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    Message,
    FSInputFile,
    InputMediaPhoto,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from bot.config import settings
from bot.db.invoices.requests import InvoicesDAO
from bot.db.users.requests import UsersDAO
from bot.fsm.fsm import CardFiveSG
from bot.utils.payment import generate_payment_link

router = Router(name="crystal_5_router")


async def start_card_method(builder: InlineKeyboardBuilder, message: Message):
    builder.row(InlineKeyboardButton(text="–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è‚úîÔ∏è", callback_data="in_process_ok"))

    cards_id = list()

    while True:
        if len(cards_id) == 5:
            break

        card_id = random.randint(1, 122)
        if card_id not in cards_id:
            cards_id.append(card_id)

    cards = [
        InputMediaPhoto(
            media=FSInputFile(path=Path(f"bot/images/cards/{card}.jpg")),
            caption="–≠—Ç–æ –í–∞—à–∏ –ö—Ä–∏—Å—Ç–∞–ª–ª—ã!" if not i else ""
        ) for i, card in enumerate(cards_id)
    ]

    await message.bot.send_media_group(
        chat_id=message.chat.id,
        media=cards,
    )
    await message.answer(
        text="–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –í–∞—à–∏–º–∏ –ö—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data == "crystal_5")
async def crystal_5_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    info_text = ("<b>–ú–µ—Ç–æ–¥ 5-—Ç–∏ –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ üíé</b>\n\n"
                 "1 –ö—Ä–∏—Å—Ç–∞–ª–ª: –ö—Ä–∏—Å—Ç–∞–ª–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –º–æ–µ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞\n" 
                 "2 –ö—Ä–∏—Å—Ç–∞–ª–ª: –ö—Ä–∏—Å—Ç–∞–ª–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –º–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–ª–∞\n"
                 "3 –ö—Ä–∏—Å—Ç–∞–ª–ª: –ö—Ä–∏—Å—Ç–∞–ª–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –º–æ–µ–≥–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ–ª–∞\n"
                 "4 –ö—Ä–∏—Å—Ç–∞–ª–ª: –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è —Å–¥–µ—Ä–∂–∏–≤–∞–µ—Ç\n"
                 "5 –ö—Ä–∏—Å—Ç–∞–ª–ª: –ö—Ä–∏—Å—Ç–∞–ª–ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –º–æ–µ–≥–æ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è")

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="go_next_energy_5"))
    builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_back_to_menu"))

    await callback.message.answer(
        text=f"{info_text}",
        reply_markup=builder.as_markup(),
    )
    await state.clear()
    await state.set_state(CardFiveSG.in_process)


@router.callback_query(StateFilter(CardFiveSG.in_process), F.data == "go_next_energy_5")
async def go_next_energy_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete_reply_markup()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data="go_next_crystal_5"))

    await callback.message.answer(
        text="<b>–í–∞–∂–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ ‚ö°Ô∏è</b>\n\n"
             "–î–æ—Ä–æ–≥–∏–µ, –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–º–µ–Ω–∞, "
             "–±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –≤—Å—ë –ú–∏—Ä–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–µ. "
             "–ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é, —Ç–æ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –µ—ë, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é, "
             "–∞ —Ç–∞–∫–∂–µ —á—Ç–æ–±—ã –Ω–µ –≤–∫–ª—é—á–∏–ª—Å—è –∑–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. "
             '–ü–æ—ç—Ç–æ–º—É —è –æ—Å—Ç–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É <b>"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –¥—É—à–∏"</b>, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω. '
             "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –±–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—é –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞. "
             "–í –∫–æ–Ω—Ü–µ —Å–µ–∞–Ω—Å–∞ —É –í–∞—Å –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏—Å–ª–∞—Ç—å –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –¥—É—à–∏, "
             "–Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –∫–∞–∫–∞—è —Å—É–º–º–∞ —ç—Ç–æ –±—É–¥–µ—Ç. –°—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –í–∞–º –¥—É—à–∞.\n" 
             "–í–æ –ë–ª–∞–≥–æ\n\n"
             "–° –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ –í–∞—Å! ‚ù§Ô∏è",
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(CardFiveSG.in_process), F.data == "go_next_crystal_5")
async def go_next_crystal_5_handler(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    await callback.message.delete_reply_markup()

    telegram_id = callback.message.chat.id
    user = await UsersDAO.get_user(session=session, telegram_id=telegram_id)

    builder = InlineKeyboardBuilder()

    if user.free_cards > 0:
        user_free_cards = user.free_cards

        await callback.message.answer(
            text="‚ö†Ô∏è –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥\n\n"
                 f"<b><em>–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤</em></b>: {user_free_cards - 1}"
        )
    await start_card_method(builder, callback.message)


@router.callback_query(StateFilter(CardFiveSG.in_process), F.data == "in_process_ok")
async def go_crystal_5_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    await state.set_state(CardFiveSG.ending)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ‚úîÔ∏è", callback_data="ending_ok"))

    await callback.message.answer(
        text="<b>–°–∏–ª–∞ –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ö—Ä–∞–π–æ–Ω–∞</b>\n\n"
             "–î–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ —Å–≤–æ–µ–π –¥—É—à–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ö—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏ –ö—Ä–∞–π–æ–Ω–∞. "
             "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –æ–±—Ä–∞–∑, –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏—Ö –∏–º—è. –ú–æ–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å –∏ –∑–∞—Ä—è–∂–∞—Ç—å –≤–æ–¥—É. "
             "–ò–ª–∏ –º—ã—Å–ª–µ–Ω–Ω–æ –ø–æ–º–µ—â–∞—Ç—å –∏—Ö –≤ —Å–≤–æ—é –∞—É—Ä—É. " 
             "–ú–æ–∂–Ω–æ –ø–æ—Å—ã–ª–∞—Ç—å –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –º—ã—Å–ª–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ª—é–±–∏–º—ã–º –∏ –±–ª–∏–∑–∫–∏–º –ª—é–¥—è–º "
             "–¥–ª—è –∏—Ö –∏—Å—Ü–µ–ª–µ–Ω–∏—è –∏ –±–ª–∞–≥–∞ (–∑–∞–ø—Ä–∞—à–∏–≤–∞—è –ø—Ä–∏ —ç—Ç–æ–º –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –∏—Ö –í—ã—Å—à–µ–≥–æ –Ø). "
             "–£ –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –µ—Å—Ç—å —Å–≤–æ—ë —Å–æ–∑–Ω–∞–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤–∞–∂–Ω–æ, "
             "–∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –í—ã –Ω–∞–ª–æ–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–µ–±—è, –æ–Ω–∏ –Ω–∞–π–¥—É—Ç –ø—É—Ç—å. "
             "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã –ö—Ä–∞–π–æ–Ω–∞ –ø–æ—Å–ª–∞–Ω—ã –Ω–∞–º –°–≤–µ—Ç–ª—ã–º–∏ C–∏–ª–∞–º–∏ –¥–ª—è –±–ª–∞–≥–∞ –ª—é–¥–µ–π, "
             "–ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –±–ª–∞–≥–æ, –æ—à–∏–±–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã.",
    )
    await callback.message.answer_photo(
        caption="–¢–∞–∫ –∂–µ —è —Å–æ–≤–µ—Ç—É—é –í–∞–º –∑–∞–∑–µ–º–ª–∏—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –ö—Ä–∏—Å—Ç–∞–ª–ª–∞ –ê—Ä–∏—Å. "
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ö—Ä–∞–π–æ–Ω–∞ –º—è–≥–∫–æ –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞—à–∏–º —Ç–µ–ª–æ–º –∏ –¥—É—à–æ–π.\n\n"
                "<b>–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –í–∞—à–∏–º –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–º –∏ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å —Å –µ–≥–æ —ç–Ω–µ—Ä–≥–∏–µ–π!</b>",
        photo=FSInputFile(path=Path("bot/images/cards/zazemlenie.jpg")),
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(CardFiveSG.ending), F.data == "ending_ok")
async def in_process_ok_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()

    builder = InlineKeyboardBuilder()
    telegram_id = callback.message.chat.id
    user = await UsersDAO.get_user(session=session, telegram_id=telegram_id)

    if not user.free_cards:
        builder.row(InlineKeyboardButton(text="–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –¥—É—à–∏", callback_data="own_pay"))
        await state.set_state(CardFiveSG.thankful)
    else:
        await UsersDAO.update_user(session=session, telegram_id=telegram_id, free_cards=user.free_cards - 1)
        await UsersDAO.add_buy_by_user(session=session, telegram_id=telegram_id)
        builder.row(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_menu"))
        await state.clear()

    await callback.message.answer(
        text="<b>–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –í—Å–µ–ª–µ–Ω–Ω–æ–π</b>\n\n"
             "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –ø–æ—Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∫–∞—Ä—Ç–æ–π, "
             "—è –ø—Ä–µ–¥–ª–∞–≥–∞—é –í–∞–º –ø—Ä–æ–π—Ç–∏ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.\n"
             "–Ø –±–ª–∞–≥–æ–¥–∞—Ä—é –í—ã—Å—à–∏–µ —Å–∏–ª—ã –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ. –í—ã—Å—ã–ª–∞—é –í–∞–º –∫—Ä–∏—Å—Ç–∞–ª–ª –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏. "
             "–ü—Ä–æ—Å—Ç–æ —Å–æ–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å —Å –Ω–∏–º –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –í—Å–µ—Ö. "
             "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–≤–µ—Ç–ª—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏–Ω–µ—Å—É—Ç –í–∞–º –∏–∑–æ–±–∏–ª–∏–µ –∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤–æ –≤—Å–µ–º.",
    )
    await callback.message.answer_photo(
        caption="–° –õ—é–±–æ–≤—å—é –∏ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∫ –í–∞–º!‚ù§Ô∏è\n"
                "–Ø –∑–∞–∫—Ä—ã–≤–∞—é —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –í–æ –ë–ª–∞–≥–æ –í—Å–µ–º!‚ù§Ô∏è",
        photo=FSInputFile(path=Path("bot/images/cards/blagodarnost.jpg")),
        reply_markup=builder.as_markup(),
    )


@router.callback_query(StateFilter(CardFiveSG.thankful), F.data == "own_pay")
async def own_pay_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ‚ù§Ô∏è",
    )


@router.message(StateFilter(CardFiveSG.thankful), F.text)
async def thankful_payment_handler(message: Message, session: AsyncSession):
    try:
        cost = float(message.text)
    except ValueError:
        await message.answer(
            text="–Ø –æ–∂–∏–¥–∞—é –æ—Ç –í–∞—Å –≤–≤–æ–¥–∞ –ª—é–±–æ–π —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —á–∏—Å–ª–∞ ‚ù§Ô∏è",
        )
    else:
        invoice_id = await InvoicesDAO.create_invoice(session=session)

        url = generate_payment_link(
            merchant_login=settings.ROBOKASSA_MERCHANT_LOGIN,
            merchant_password_1=settings.ROBOKASSA_PROD_PWD_1,
            cost=cost,
            number=invoice_id,
            description="–ú–µ—Ç–æ–¥ 5-—Ç–∏ –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤",
            shp_user_id=message.chat.id,
        )

        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –¥—É—à–∏", url=url))
        builder.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É üîÑ", callback_data="own_pay"))

        await message.answer(
            text="–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å ‚ù§Ô∏è",
            reply_markup=builder.as_markup(),
        )

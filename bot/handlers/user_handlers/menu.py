from pathlib import Path

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.fsm.fsm import GratitudeSG
from bot.handlers.user_handlers.helpers import is_user_in_payment
from bot.keyboards.user_kb import create_menu_kb

router = Router(name="menu_router")


@router.message(Command(commands="menu"))
async def menu_command(message: Message, state: FSMContext):
    if await is_user_in_payment(state):
        pass
    else:
        await message.answer(
            text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè°",
            reply_markup=create_menu_kb(),
        )
        await state.clear()


@router.callback_query(F.data == "go_to_menu")
async def menu_callback_button_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè°",
        reply_markup=create_menu_kb(),
    )
    await state.clear()


@router.callback_query(F.data == "go_back_to_menu")
async def go_back_to_menu_from_payment_command(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete_reply_markup()
    await callback.message.answer(
        text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üè°",
        reply_markup=create_menu_kb(),
    )
    await state.clear()


@router.message(Command(commands="consultation"))
async def consultation_handler(message: Message, state: FSMContext):
    if await is_user_in_payment(state):
        pass
    else:
        await message.answer(
            text="<b>üìù–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>\n\n"
                 "–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–µ–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, "
                 "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ.\n"
                 "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –¢–∞—Ç—å—è–Ω–∞!‚ù§Ô∏è\n\n"
                 "<b><em>–¢–µ–ª–µ–≥—Ä–∞–º</em></b>üîó: @Butakova_T",
        )


@router.message(Command(commands="support"))
async def support_handler(message: Message):
    await message.answer(
        text="<b>‚öí–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n"
             "–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, "
             "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∏ –º—ã –∏—Ö —Ä–µ—à–∏–º –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.\n\n"
             "–ë–ª–∞–≥–æ–¥–∞—Ä—é ‚ù§Ô∏è\n\n"
             "<b><em>–¢–µ–ª–µ–≥—Ä–∞–º</em></b>üîó: @Butakova_T",
    )


@router.message(Command(commands="site"))
async def site_handler(message: Message, state: FSMContext):
    if await is_user_in_payment(state):
        pass
    else:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–°–∞–π—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è", url="https://www.shimaa.de/kristalle-der-wirklichkeit/"))

        await message.answer(
            text="<b>üîó–°–∞–π—Ç</b>\n\n"
                 "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è —Ç–µ—Ö–Ω–∏–∫–∏",
            reply_markup=builder.as_markup(),
        )


@router.message(Command(commands="oferta"))
async def oferta_command(message: Message, state: FSMContext):
    if await is_user_in_payment(state):
        pass
    else:
        await message.answer_document(
            document=FSInputFile(Path("bot/oferta/–û—Ñ–µ—Ä—Ç–∞.docx")),
        )


@router.message(Command(commands="rules"))
async def rules_command(message: Message, state: FSMContext):
    if await is_user_in_payment(state):
        pass
    else:
        await message.answer(
            text="üßæ <b>–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:</b>\n\n"
                 "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å–∫–ª–∞–¥–∞ –∫–∞—Ä—Ç –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç–µ –æ–ø–ª–∞—Ç—É, "
                 "–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—à–ª–µ—Ç –≤–∞–º –≤–∞—à—É –∫–∞—Ä—Ç—É (–µ—ë —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é).\n"
                 "–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                 "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –í–∞—Å 24/7."
        )


@router.message(Command(commands="gratitude"))
async def gratitude_command(message: Message, state: FSMContext):
    if await is_user_in_payment(state):
        pass
    else:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_menu"))

        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ‚ù§Ô∏è",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(GratitudeSG.gratitude)

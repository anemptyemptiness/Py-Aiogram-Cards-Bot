from pathlib import Path

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, FSInputFile, Update
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy.ext.asyncio import AsyncSession

from bot.db.users.requests import UsersDAO
from bot.fsm.fsm import MiniDialogSG

router = Router(name="startup_router")


@router.message(CommandStart())
async def start_first_time_handler(message: Message, session: AsyncSession, state: FSMContext):
    user_telegram_id = message.from_user.id
    user = await UsersDAO.get_user(session=session, telegram_id=user_telegram_id)
    builder = InlineKeyboardBuilder()

    if not user:
        builder.row(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ‚ú®", callback_data="greeting_btn"))

        await message.answer_document(
            document=FSInputFile(Path("bot/oferta/–û—Ñ–µ—Ä—Ç–∞.docx")),
        )
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é  –í–∞—Å, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n\n"
                 "–Ø –ø—Ä–∏–≥–ª–∞—à–∞—é –í–∞—Å –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.\n" 
                 "–¢–∞–∫ –¥–æ–ª–≥–æ —è –¥—É–º–∞–ª–∞ –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ —Å–≤–µ—Ç–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.\n\n"
                 "–û–¥–Ω–∞–∂–¥—ã, —Å–æ–∑–¥–∞–≤ –∫–æ–ª–æ–¥—É –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –ö—Ä–∞–π–æ–Ω–∞, —è –ø–æ–Ω—è–ª–∞, —á—Ç–æ –±—ã–≤–∞—é—Ç —Å–ª—É—á–∞–∏, "
                 "–∫–æ–≥–¥–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, –Ω–æ —É –º–µ–Ω—è  –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–¥ —Ä—É–∫–æ–π –∫–∞—Ä—Ç.\n\n"
                 "–ò —Ç–æ–≥–¥–∞ —è —Ä–µ—à–∏–ª–∞—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–≤–µ—Ç–ª–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.\n"
                 "–Ø –Ω–∞–ø–æ–ª–Ω–∏–ª–∞ –µ–≥–æ —Å–≤–µ—Ç–æ–º –ª—é–±–≤–∏ –∏ —Å —Ç—Ä–µ–ø–µ—Ç–æ–º –æ—Ç–Ω–æ—à—É—Å—å –∫ –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ —Å—é–¥–∞ –∑–∞—à—ë–ª.",
            reply_markup=builder.as_markup(),
        )
        await UsersDAO.add_user(session=session, telegram_id=user_telegram_id, username=message.from_user.username)
        await state.set_state(MiniDialogSG.greeting)
    else:
        builder.row(InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã? üíé", callback_data="what_is_crystal_btn"))
        builder.row(InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè°", callback_data="go_to_menu"))
        builder.row(InlineKeyboardButton(text="–ü–æ–º–æ—â—å ‚ù§Ô∏è", callback_data="help_btn"))

        await message.answer(
            text=f'–ü—Ä–∏–≤–µ—Ç, <a href="{message.from_user.url}">{message.from_user.username}</a>!',
            reply_markup=builder.as_markup(),
        )


@router.callback_query(F.data == "go_back_to_start_cmd")
async def go_back_to_start_cmd_handler(callback: CallbackQuery, session: AsyncSession):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã? üíé", callback_data="what_is_crystal_btn"))
    builder.row(InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè°", callback_data="go_back_to_menu"))
    builder.row(InlineKeyboardButton(text="–ü–æ–º–æ—â—å ‚ù§Ô∏è", callback_data="help_btn"))

    user = await UsersDAO.get_user(session=session, telegram_id=callback.message.chat.id)

    await callback.message.edit_text(
        text=f'–ü—Ä–∏–≤–µ—Ç, <a href="tg://user?id={callback.message.chat.id}">{user.username}</a>!',
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "what_is_crystal_btn")
async def what_is_crystal_btn_handler(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_start_cmd"))

    await callback.message.edit_text(
        text="<b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã? üíé</b>\n\n"
             "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã - —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü—ã –í—Å–µ–ª–µ–Ω–Ω–æ–π, —Ö—Ä–∞–Ω—è—â–∏–µ –≤—ã—Å–æ–∫–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏."  
             "–í—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–µ–æ–±—ã—á–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π. –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤–∞–º –ø–æ–∫–∞–∂—É—Ç –∏—Å—Ç–æ—Ä–∏—é" 
             "–≤ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö, –∏ –¥–∞–¥—É—Ç —Ç–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –Ω–∏–≥–¥–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ.  –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏" 
             "–∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —è–∑—ã–∫–æ–º –°–≤–µ—Ç–∞, –ø–∞–∫–µ—Ç–∞–º–∏ —Å–≤–µ—Ç–æ–≤—ã—Ö" 
             "–∏–º–ø—É–ª—å—Å–æ–≤. "
             "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç —É—Å–∏–ª–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –°–≤–µ—Ç–∞, –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –º–µ–Ω—è—é—Ç –∂–∏–∑–Ω—å" 
             "—á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏. –ü—Ä–∏ "
             "—Å–æ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–∏ —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç —Å–∫–æ—Ä–µ–π—à–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏" 
             "–≤–∞—à–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏ –º—ã—Å–ª–µ—Ñ–æ—Ä–º",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "help_btn")
async def help_btn_handler(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back_to_start_cmd"))

    await callback.message.edit_text(
        text="–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, "
             "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∏ –º—ã —Ä–µ—à–∏–º –∏—Ö –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.\n\n"
             "–ë–ª–∞–≥–æ–¥–∞—Ä—é ‚ù§Ô∏è\n\n"
             "<b><em>–¢–µ–ª–µ–≥—Ä–∞–º</em></b>üîó: @Butakova_T",
        reply_markup=builder.as_markup(),
    )
    await callback.answer()
